import wixData from 'wix-data';
import { OpenAI } from 'openai';
import { getSecret } from 'wix-secrets-backend';
import { cosineSimilarity } from './utils';

// Constants
const VALID_EMOTIONS = ['happy', 'sad', 'angry', 'surprised', 'outofservice'];
const INSTRUCTIONS = `
  You are a customer service assistant. Answer the user's question based on the provided context.
  Only choose from these emotions (${VALID_EMOTIONS.join(',')}).
  Your response should be formatted as follows:
  "Answer: [your answer here]
  Emotion: [emotion here]"
`;
const INTENT_INSTRUCTIONS = `
  You are an intent classifier.
  You MUST classify the user's intent into one of these options:
  - "order" → if the user is placing an actual food or drink order.
  - "availability" → if the user is asking whether something is available.
  - "question" → if the user is asking about the system, the menu, how things work, payment, how to order, etc.
  - "unknown" → if you're not sure.
  Examples:
  - "I want a burger" → order
  - "Do you have fries?" → availability
  - "Can I make an order?" → question
  - "How can I pay?" → question
  - "Fries" → order
  - "Pizza" → order
  - "Can I order something?" → question
  - "Make custom order?" → question
  - "order lamb kebabs" → order
  - "get me a coffee" → order
  ONLY return one of: order, availability, question, or unknown.
`;

// Utility Functions
/**
 * Retrieves the top 5 most relevant text chunks for a query based on cosine similarity.
 * @param {number} ownerId - The ID of the owner (number).
 * @param {string} query - The user's query.
 * @returns {Promise<string[]>} - Array of top 5 chunk texts.
 */
export async function getTopChunks(ownerId, query) {
  console.log('getTopChunks ownerId:', ownerId, 'Type:', typeof ownerId);
  if (isNaN(ownerId) || !Number.isInteger(ownerId) || !query) {
    throw new Error(`Invalid ownerId or query: ownerId=${ownerId} (type: ${typeof ownerId}), query=${query}`);
  }
  try {
    // Fetch PDFs for the owner
    const pdfs = await wixData.query('PDFs')
      .eq('ownerId', ownerId) // Pass as number
      .find({ suppressAuth: true });
    const pdfIds = pdfs.items.map(item => item._id);

    // Fetch knowledge chunks associated with the PDFs
    const chunks = await wixData.query('KnowledgeChunks')
      .hasSome('pdfId', pdfIds)
      .find();

    // Generate query embedding
    const openai = new OpenAI({ apiKey: await getSecret('OPENAI_API_KEY') });
    const embeddingResponse = await openai.embeddings.create({
      model: 'text-embedding-3-small',
      input: query
    });
    const queryEmbedding = embeddingResponse.data[0].embedding;

    // Compute similarity for each chunk
    const topChunks = chunks.items.map(chunk => {
      const chunkEmbedding = JSON.parse(chunk.embedding);
      return {
        text: chunk.text,
        similarity: cosineSimilarity(queryEmbedding, chunkEmbedding)
      };
    });

    // Sort by similarity and return top 5 chunk texts
    topChunks.sort((a, b) => b.similarity - a.similarity);
    return topChunks.slice(0, 5).map(c => c.text);
  } catch (error) {
    console.error('Error in getTopChunks:', error.message);
    throw error;
  }
}


/**
 * Checks if an item exists in the menu or knowledge chunks.
 * @param {number} ownerId - The ID of the owner (number).
 * @param {string} itemName - The name of the item to check.
 * @param {string[]|null} chunks - Optional pre-fetched chunks.
 * @param {Object[]|null} menuItems - Optional pre-fetched menu items.
 * @returns {Promise<boolean>} - True if the item exists and has quantity > 0, false otherwise.
 */
async function checkItemExists(ownerId, itemName, chunks = null, menuItems = null) {
  console.log('Test log 2025: Entering checkItemExists');
  console.log('checkItemExists ownerId:', ownerId, 'Type:', typeof ownerId, 'itemName:', itemName);
  if (isNaN(ownerId) || !Number.isInteger(ownerId)) {
    throw new Error(`Invalid ownerId: must be a number, got ${ownerId} (type: ${typeof ownerId})`);
  }
  try {
    if (!itemName) return false;
    const queryWords = itemName.toLowerCase().split(/\s+/);

    if (!menuItems) {
      const result = await wixData.query('MenuItems')
        .eq('ownerId', ownerId)
        .find();
      menuItems = result.items;
      console.log('Fetched menuItems:', menuItems);
    }

    // Check menu items with quantity validation
    let inMenu = false;
    if (menuItems.length > 0) {
      inMenu = menuItems.some(item => {
        console.log('Checking item:', item);
        const englishWords = (item.name || '').toLowerCase().split(/\s+/);
        const arabicWords = (item.itemName_ar || '').toLowerCase().split(/\s+/);
        const itemWords = englishWords.concat(arabicWords);
        const isMatch = queryWords.some(queryWord =>
          itemWords.some(itemWord => itemWord.toLowerCase().startsWith(queryWord))
        );
        const quantity = Number(item.quantity) || 0;
        console.log('Match:', isMatch, 'Quantity:', quantity);
        return isMatch && quantity > 0; // Only true if match and quantity > 0
      });
    }

    let inChunks = false;
    if (!inMenu && menuItems.every(item => !item.name.toLowerCase().includes(itemName.toLowerCase()))) {
      // Only check chunks if no menu item matches at all
      if (!chunks) {
        chunks = await getTopChunks(ownerId, itemName);
      }
      inChunks = chunks.some(chunk =>
        queryWords.some(queryWord => chunk.toLowerCase().includes(queryWord))
      );
      console.log('inChunks match:', inChunks);
    }

    console.log('inMenu:', inMenu, 'inChunks:', inChunks);
    return inMenu || inChunks; // Return true only if inMenu is true or no menu match with inChunks
  } catch (error) {
    console.error('Error in checkItemExists:', error.message);
    return false;
  }
}
/**
 * Detects the user's intent using OpenAI.
 * @param {string} query - The user's query.
 * @returns {Promise<string>} - One of 'order', 'availability', 'question', or 'unknown'.
 */
async function detectIntent(query) {
  try {
    if (!query) return 'unknown';

    const openai = new OpenAI({ apiKey: await getSecret('OPENAI_API_KEY') });
    const intentResponse = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: INTENT_INSTRUCTIONS },
        { role: 'user', content: query }
      ]
    });
    return intentResponse.choices[0].message.content.trim().toLowerCase();
  } catch (error) {
    console.error('Error in detectIntent:', error.message);
    return 'unknown';
  }
}

/**
 * Gets the display name for an item, preferring Arabic if applicable.
 * @param {string} itemName - The item name from the query.
 * @param {Object|null} matchedItem - The matched menu item.
 * @param {boolean} isArabic - Whether the query is in Arabic.
 * @returns {string} - The display name for the item.
 */
function getDisplayName(itemName, matchedItem, isArabic) {
  return isArabic && matchedItem?.itemName_ar
    ? matchedItem.itemName_ar
    : (matchedItem?.name || itemName);
}

// Main Function
/**
 * Processes a user query and returns a response based on intent and context.
 * @param {number} ownerId - The ID of the owner (number).
 * @param {string} query - The user's query.
 * @returns {Promise<{message: string, orderId: string|null}>} - Response with message and optional orderId.
 */
export async function processQuery(ownerId, query) {
  console.log('processQuery ownerId:', ownerId, 'Type:', typeof ownerId);
  if (isNaN(ownerId) || !Number.isInteger(ownerId) || !query || typeof query !== 'string') {
    throw new Error(`Invalid ownerId or query: ownerId=${ownerId} (type: ${typeof ownerId}), query=${query}`);
  }
  try {
    const isArabic = /[\u0600-\u06FF]/.test(query);
    const queryLower = query.toLowerCase().trim();
    const chunks = await getTopChunks(ownerId, query);

    // Cache menu items to avoid repeated queries
    const menuItems = (await wixData.query('MenuItems')
      .eq('ownerId', ownerId) // Pass as number
      .find()).items;

    // Step 1: Detect user intent
    const intent = await detectIntent(query);

    // Step 2: Handle availability intent
    if (intent === 'availability') {
      const itemNameMatch = queryLower.match(/do you have\s+(.+?)(\?|$)/i) ||
                            queryLower.match(/(?:هل لديك|عندك|هل يوجد)\s+(.+?)(\؟|$)/);
      const itemName = itemNameMatch?.[1]?.trim();

      if (itemName) {
        const exists = await checkItemExists(ownerId, itemName, chunks, menuItems);
        const matchedItem = menuItems.find(item =>
          (item.name?.toLowerCase().includes(itemName.toLowerCase()) ||
           item.itemName_ar?.toLowerCase().includes(itemName.toLowerCase()))
        );
        const displayName = getDisplayName(itemName, matchedItem, isArabic);

        const message = exists
          ? (isArabic
              ? `Answer: نعم، ${displayName} متوفر لدينا\nEmotion: happy`
              : `Answer: Yes, we have ${displayName}\nEmotion: happy`)
          : (isArabic
              ? `Answer: عذرًا، لا يوجد ${displayName} حاليًا\nEmotion: sad`
              : `Answer: Sorry, we don’t have ${displayName} at the moment\nEmotion: sad`);
        return { message, orderId: null };
      }
    }

    // Step 3: Handle order intent
    if (intent === 'order') {
      // Extract quantity (Western or Arabic numerals)
      const quantityMatch = queryLower.match(/(\d+|[٠-٩]+)/);
      let quantity = 1;
      if (quantityMatch && quantityMatch[1]) {
        const numStr = quantityMatch[1].replace(/[٠-٩]/g, d => '0123456789'['٠١٢٣٤٥٦٧٨٩'.indexOf(d)]);
        const parsed = parseInt(numStr, 10);
        quantity = isNaN(parsed) || parsed <= 0 ? 1 : parsed;
      }

      // Extract item name
      let itemName = 'Unknown';
      const orderPattern = /(?:order|bring|i want|هات|عايز|أطلب|اطلب|اوردر|get)\s+(.*?)($|\?|\.|please)/i;
      const match = query.match(orderPattern);
      if (match && match[1]) {
        itemName = match[1].trim();
      }

      // Fallback: Scan menu if item name is unknown
      if (itemName === 'Unknown') {
        const possibleMatch = menuItems.find(item =>
          queryLower.includes(item.name?.toLowerCase()) ||
          queryLower.includes(item.itemName_ar?.toLowerCase())
        );
        itemName = possibleMatch?.name || possibleMatch?.itemName_ar || 'Unknown';
      }

      // Validate item existence
      const exists = await checkItemExists(ownerId, itemName, chunks, menuItems);
      if (!exists) {
        const matchedItem = menuItems.find(item =>
          (item.name?.toLowerCase().includes(itemName.toLowerCase()) ||
           item.itemName_ar?.toLowerCase().includes(itemName.toLowerCase()))
        );
        const displayName = getDisplayName(itemName, matchedItem, isArabic);

        const message = isArabic
          ? `Answer: عذرًا، لا يوجد ${displayName} حاليًا للطلب\nEmotion: sad`
          : `Answer: Sorry, we don’t have ${displayName} available to order\nEmotion: sad`;
        return { message, orderId: null };
      }

      // Generate order ID and respond
      const orderId = `ORDER_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
      const matchedItem = menuItems.find(item =>
        (item.name?.toLowerCase().includes(itemName.toLowerCase()) ||
         item.itemName_ar?.toLowerCase().includes(itemName.toLowerCase()))
      );
      const displayName = getDisplayName(itemName, matchedItem, isArabic);

      const message = isArabic
        ? `Answer: جاري معالجة طلبك من ${quantity} ${displayName}\nEmotion: happy`
        : `Answer: Processing your order of ${quantity} ${displayName}${quantity > 1 ? 's' : ''}\nEmotion: happy`;
      console.log('Debug: isArabic =', isArabic, 'query =', query, 'message =', message, 'itemName =', itemName);
      return { message, orderId };
    }

    // Step 4: Handle general question intent (RAG-based)


    const openai = new OpenAI({ apiKey: await getSecret('OPENAI_API_KEY') });
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: INSTRUCTIONS },
        { role: 'user', content: `${query}\n\nContext:\n${chunks.join('\n')}` }
      ]
    });


    const message = response.choices[0].message.content;
    return { message, orderId: null };
  } catch (error) {
    console.error('Error in processQuery:', error.message);
    return {
      message: 'Answer: Sorry, something went wrong. Please try again.\nEmotion: sad',
      orderId: null
    };
  }
}
