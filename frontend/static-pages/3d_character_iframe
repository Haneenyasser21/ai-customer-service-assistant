<!DOCTYPE html>
<html>
<head>
  <style>
    body { margin: 0; padding: 0; overflow: hidden; }
    canvas { width: 100%; height: 100%; }
  </style>
</head>
<body>
  <div id="container"></div>

  <!-- Load Three.js and GLTFLoader -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.134/examples/js/loaders/GLTFLoader.js"></script>

  <script>
    let scene, camera, renderer, model;
    let targetExpression = null; // Store the target expression and weight
    let currentWeights = {}; // Track current weights for smooth transition

    // Initialize Three.js scene
    function init() {
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, 0, 2); // Starting z at 2, y will be set dynamically

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0xffffff); // Set background color to white
      document.getElementById('container').appendChild(renderer.domElement);

      // Add lighting
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      scene.add(ambientLight);
      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
      directionalLight.position.set(0, 1, 1);
      scene.add(directionalLight);

      // Load the environment .glb file
      const loader = new THREE.GLTFLoader();
      loader.load(
        'https://static.wixstatic.com/3d/f2e77d_b3b7b1149c874258b8a370c8d37d40bf.glb',
        (gltf) => {
          const environment = gltf.scene;
          scene.add(environment);

          // Adjust environment scale, position, and rotation
          const scaleFactor = 12; // Maintain scale
          environment.scale.set(scaleFactor, scaleFactor, scaleFactor);
          environment.position.set(0, 0, -5); // Maintain position
          environment.rotation.y = Math.PI * -0.75; // Rotate further to the right
        },
        undefined,
        (error) => console.error('Error loading environment GLB:', error)
      );

      // Load the character .glb file
      loader.load(
        'https://cdn.glitch.me/a8510022-37e3-4a86-8086-f66eb654519b/make_human.glb?v=1745238784995',
        (gltf) => {
          model = gltf.scene;
          scene.add(model);

          // Center the model and calculate bounding box
          const box = new THREE.Box3().setFromObject(model);
          const center = box.getCenter(new THREE.Vector3());
          const size = box.getSize(new THREE.Vector3());
          console.log('Bounding Box Center:', center);
          console.log('Bounding Box Size:', size);
          model.position.sub(center); // Center the model at origin

          // Scale the model to make it smaller
          const scaleFactor = 0.5; // Reduce size by half
          model.scale.set(scaleFactor, scaleFactor, scaleFactor);

          // Rotate the model very very slightly to the left
          model.rotation.y = -Math.PI * 0.01;
          model.rotation.x = 0; // Align body vertically

          // Adjust model position to focus on head
          const headHeight = size.y * 0.5 * scaleFactor;
          model.position.y += headHeight * 1.6;
          model.position.z -= headHeight * 0.5;

          // Adjust camera
          camera.position.y = headHeight * 1.6;
          camera.position.z = 0.2;
          camera.lookAt(0, headHeight * 1.6 + model.position.y, model.position.z);

          // Initialize morph target weights
          model.traverse((child) => {
            if (child.isMesh && child.morphTargetDictionary) {
              for (let key in child.morphTargetDictionary) {
                currentWeights[key] = 0;
              }
            }
          });

          animate();
        },
        undefined,
        (error) => console.error('Error loading character GLB:', error)
      );
    }

    // Animation loop with smooth weight transition
    function animate() {
      requestAnimationFrame(animate);

      if (model && targetExpression) {
        model.traverse((child) => {
          if (child.isMesh && child.morphTargetDictionary) {
            for (let expression in child.morphTargetDictionary) {
              const index = child.morphTargetDictionary[expression];
              const targetWeight = expression === targetExpression.name ? targetExpression.weight : 0;
              const currentWeight = child.morphTargetInfluences[index] || 0;

              // Smoothscan interpolate toward target weight
              if (currentWeight !== targetWeight) {
                const step = 0.05;
                child.morphTargetInfluences[index] = currentWeight +
                  Math.sign(targetWeight - currentWeight) *
                  Math.min(step, Math.abs(targetWeight - currentWeight));
              }
            }
          }
        });
      }

      renderer.render(scene, camera);
    }

    // Set a specific expression
    function setExpression(expression, weight) {
      if (!model) return;
      targetExpression = { name: expression, weight: weight };
    }

    // Reset all expressions
    function resetExpressions() {
      if (!model) return;
      targetExpression = null;
    }

    // Handle emotion messages from Wix
    window.onmessage = function(event) {
      const data = event.data;
      if (data && data.type === "emotion") {
        const expression = data.value; // e.g., "smile", "sad", "surprise", "angry"
        const supportedExpressions = ["smile", "sad", "surprise", "angry"];
        if (supportedExpressions.includes(expression)) {
          resetExpressions();
          setExpression(expression, 1);
        } else {
          console.warn("Unknown emotion received:", expression);
        }
      }
    };

    // Start
    init();

    // Resize handling
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
