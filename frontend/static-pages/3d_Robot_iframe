<!DOCTYPE html>
<html>
<head>
  <title>3D Model with Face Texture and Waveform</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
  <style>
    body {
      margin: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: #000;
      font-family: Arial, sans-serif;
    }
    canvas {
      width: 100%;
      height: 100vh;
    }
    .controls {
      position: absolute;
      top: 20px;
      left: 20px;
      z-index: 100;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    .emotion-buttons, .audio-controls {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }
    button {
      padding: 10px 15px;
      background: rgba(0, 255, 204, 0.8);
      border: none;
      border-radius: 5px;
      color: #000;
      cursor: pointer;
      font-weight: bold;
      transition: all 0.3s ease;
    }
    button:hover {
      background: rgba(0, 255, 204, 1);
      transform: scale(1.05);
    }
    button:disabled {
      background: rgba(100, 100, 100, 0.5);
      cursor: not-allowed;
      transform: none;
    }
    .audio-info {
      color: #00ffcc;
      font-size: 12px;
      margin-top: 5px;
    }
    .user-interaction-prompt {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.8);
      color: #00ffcc;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
      z-index: 200;
    }
  </style>
</head>
<body>
  <div id="container"></div>
  
  <div class="controls">
    <div class="emotion-buttons">
      <button onclick="SendEmotionTo3D('happy')">Happy</button>
      <button onclick="SendEmotionTo3D('sad')">Sad</button>
      <button onclick="SendEmotionTo3D('angry')">Angry</button>
      <button onclick="SendEmotionTo3D('surprised')">Surprised</button>
      <button onclick="SendEmotionTo3D('outofservice')">Out of Service</button>
    </div>
    <div class="audio-controls">
      <button id="enableAudioBtn" onclick="enableAudio()">Enable Audio</button>
      <button id="testAudioBtn" onclick="testAudio()" disabled>Test Audio</button>
    </div>
    <div class="audio-info">
      <div id="audioStatus">Audio: Disabled (Click Enable Audio first)</div>
    </div>
  </div>

  <div id="userInteractionPrompt" class="user-interaction-prompt" style="display: none;">
    <h3>Audio Requires User Interaction</h3>
    <p>Click anywhere to enable audio playback</p>
    <button onclick="handleUserInteraction()">Enable Audio</button>
  </div>

  <script>
    let audioEnabled = false;
    let audioContext = null;

    const scene = new THREE.Scene();
    const backgroundTexture = new THREE.TextureLoader().load(
      'https://static.wixstatic.com/media/f2e77d_03c4e7866ef141a8a8e80d1d189d89dd~mv2.png'
    );
    scene.background = backgroundTexture;

    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById('container').appendChild(renderer.domElement);

    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.minDistance = 1;
    controls.maxDistance = 10;

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
    scene.add(ambientLight);
    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight1.position.set(1, 1, 1).normalize();
    scene.add(directionalLight1);
    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight2.position.set(-1, 1, -1).normalize();
    scene.add(directionalLight2);

    const loader = new THREE.GLTFLoader();
    const textureLoader = new THREE.TextureLoader();
    let faceMesh = null;

    const textureUrls = {
      happy: 'https://static.wixstatic.com/media/f2e77d_850914d6da4d497cbcc459cf1787c5ed~mv2.png',
      sad: 'https://static.wixstatic.com/media/f2e77d_ebf8737babb042a8a3c88700a76a9ae9~mv2.png',
      angry: 'https://static.wixstatic.com/media/f2e77d_920de5d6f80e4c57bd9980cc958a9755~mv2.png',
      surprised: 'https://static.wixstatic.com/media/f2e77d_4a36f32a045f4eb38bfb953cf1e6639e~mv2.png',
      outofservice: 'https://static.wixstatic.com/media/f2e77d_c1be36b6500a4bd0ab2b04cb3d09d1ba~mv2.png'
    };

    const validEmotions = Object.keys(textureUrls);

    loader.load(
      'https://static.wixstatic.com/3d/f2e77d_a00e83c18a204796bc7db3e5ad8792cf.glb',
      (gltf) => {
        const model = gltf.scene;
        model.scale.set(2, 2, 2);
        model.position.y -= 3.0;
        model.position.z += 0.2;
        model.rotation.x = -0.4;
        scene.add(model);

        model.traverse((child) => {
          if (child.isMesh && child.name.toLowerCase() === 'face') {
            faceMesh = child;
            faceMesh.material = new THREE.MeshStandardMaterial({
              map: null,
              side: THREE.DoubleSide,
              transparent: true,
              roughness: 0.5,
              metalness: 0,
              color: 0xffffff
            });
            faceMesh.material.needsUpdate = true;
          }
        });

        if (!faceMesh) {
          console.error('Face mesh not found in the model');
        } else {
          updateTexture('happy');
        }
      },
      undefined,
      (error) => console.error('Error loading GLB:', error)
    );

    function updateTexture(textureKey) {
      if (faceMesh && textureUrls[textureKey]) {
        textureLoader.load(
          textureUrls[textureKey],
          (texture) => {
            texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
            texture.encoding = THREE.sRGBEncoding;
            texture.center.set(0.5, 0.5);
            texture.rotation = Math.PI / 2;
            texture.needsUpdate = true;
            faceMesh.material.map = texture;
            faceMesh.material.needsUpdate = true;
          },
          undefined,
          (error) => console.error(`Error loading texture ${textureKey}:`, error)
        );
      }
    }

    function SendEmotionTo3D(emotion) {
      if (!validEmotions.includes(emotion)) {
        console.error(`Invalid emotion: ${emotion}`);
        return;
      }
      updateTexture(emotion);
    }

    // Audio element and waveform logic
    const audio = new Audio();
    audio.crossOrigin = "anonymous";
    const waveformGroup = new THREE.Group();
    const barCount = 10;
    const barWidth = 0.1;
    const spacing = 0.15;

    for (let i = 0; i < barCount; i++) {
      const height = Math.random() * 0.5 + 0.3;
      const geometry = new THREE.BoxGeometry(barWidth, height, 0.05);
      const material = new THREE.MeshBasicMaterial({ color: 0x00ffcc });
      const bar = new THREE.Mesh(geometry, material);
      bar.position.x = (i - barCount / 2) * spacing;
      bar.position.y = 1.3;
      bar.position.z = -0.4;
      waveformGroup.add(bar);
    }

    waveformGroup.visible = false;
    scene.add(waveformGroup);

    audio.addEventListener('play', () => {
      waveformGroup.visible = true;
      updateAudioStatus('Playing audio...');
    });
    
    audio.addEventListener('ended', () => {
      waveformGroup.visible = false;
      updateAudioStatus('Audio: Ready');
    });

    audio.addEventListener('error', (e) => {
      console.error('Audio error:', e);
      updateAudioStatus('Audio error occurred');
      waveformGroup.visible = false;
    });

    function enableAudio() {
      if (audioEnabled) return;
      
      try {
        // Create audio context to test if audio is allowed
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        if (audioContext.state === 'suspended') {
          audioContext.resume().then(() => {
            audioEnabled = true;
            updateAudioControls();
            updateAudioStatus('Audio: Enabled and Ready');
          });
        } else {
          audioEnabled = true;
          updateAudioControls();
          updateAudioStatus('Audio: Enabled and Ready');
        }
      } catch (error) {
        console.error('Failed to enable audio:', error);
        updateAudioStatus('Failed to enable audio');
      }
    }

    function updateAudioControls() {
      const enableBtn = document.getElementById('enableAudioBtn');
      const testBtn = document.getElementById('testAudioBtn');
      
      if (audioEnabled) {
        enableBtn.textContent = 'Audio Enabled âœ“';
        enableBtn.disabled = true;
        testBtn.disabled = false;
      }
    }

    function updateAudioStatus(status) {
      document.getElementById('audioStatus').textContent = status;
    }

    function testAudio() {
      if (!audioEnabled) {
        updateAudioStatus('Please enable audio first');
        return;
      }
      
      // Create a simple test tone instead of loading external audio
      try {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.5);
        
        waveformGroup.visible = true;
        setTimeout(() => {
          waveformGroup.visible = false;
        }, 500);
        
        updateAudioStatus('Test audio played');
      } catch (error) {
        console.error('Test audio failed:', error);
        updateAudioStatus('Test audio failed');
      }
    }

    function playAudio(url) {
      if (!audioEnabled) {
        document.getElementById('userInteractionPrompt').style.display = 'block';
        return;
      }
      
      try {
        if (!url || !url.startsWith('https://static.wixstatic.com/mp3/')) {
          throw new Error('Invalid or unsupported audio URL');
        }
        audio.src = url;
        audio.play().catch((error) => {
          console.error('Audio playback failed:', error.message);
          updateAudioStatus('Audio playback failed');
        });
      } catch (error) {
        console.error('Error in playAudio:', error.message);
        updateAudioStatus('Error in audio playback');
      }
    }

    function handleUserInteraction() {
      document.getElementById('userInteractionPrompt').style.display = 'none';
      enableAudio();
    }

    // Message handling for external communication
    window.addEventListener('message', (event) => {
      if (event.data && event.data.emotion) {
        SendEmotionTo3D(event.data.emotion);
      }
      if (event.data && event.data.audioUrl) {
        playAudio(event.data.audioUrl);
      }
    });

    camera.position.set(0, 1.5, 3.5);

    function animate() {
      requestAnimationFrame(animate);
      controls.update();

      if (waveformGroup.visible) {
        waveformGroup.children.forEach((bar, index) => {
          const scaleY = Math.sin(Date.now() * 0.005 + index) * 0.5 + 1.1;
          bar.scale.y = scaleY;
        });
      }

      renderer.render(scene, camera);
    }
    animate();

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // Auto-enable audio on any user interaction with the page
    document.addEventListener('click', () => {
      if (!audioEnabled) {
        enableAudio();
      }
    }, { once: true });

  </script>
</body>
</html>
